<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="CoverImageBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXA
        AUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBQAhwglAAHCCXAAUIJcIBI3779H6CV/RCd
        MDTBAAAAAElFTkSuQmCC
</value>
  </data>
</root>