<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="CoverImageBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAXAAAAIzCAYAAAAZPUJgAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAANdMAADXTAQwhQ3cAABV9SURBVHhe7d0xkuPGsgVQbVD7eIvQEmYF2oD88WXLlStT
        pjztYP7PF8OIUgpFFNgAydvvnIiMmSarwGoSuAAK6O4fvgEQSYADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoADhBLgAKEE
        OEAoAQ4QSoADhBLgAKEEOEAoAQ4QSoC/mR9++OEf9fXr1+/PPKYvL0HimOEVbB1vpodX1Z9//vn92eP6
        shIkjhlewdbxZnp4Vf3nP//5/uxxfVkJEscMr2DreDM9vG716FRKX06CxDHDK9g63kwPr7EemUrpywA+
        D1v0m+mBO9YjUyl9GcDnYYt+Mz1wf/zxx398fXQqZexbBXwetug30wP3jz/++NdjR6ZSet9Vf//99393
        Fj/99NM/+tfX9Xg9/85+++23b1++fPnH2OvrenzL1vdbO8+ff/752++///691TG3Zdbr9h1xvc4vv/zy
        0LRY9am+dUZ2W179vx4743MZx33WmLmGAH8z4wZTVSpExscqDFaN/apW1Mbb+21VtbtCf52ZrXa1w+th
        2auCaLTy/fY+e/pndq8qKFf1UN2qX3/99b9t++Mrqm/vt1X1/fF6a58qT9M3lJseSqsb0Ninas94BLpS
        R4NtRX+Nmd6ujpT7Y7O6jbuOKLee36rVoN3bgWzVyvt45LPZ+r72rOwcxqrxvPuZ2GcnwN9M30hutqZS
        6rE9vc89PSAqiOqI7LaR1r/1dQ+olfA5Ylx21UxvdxtXjWd8b2rcW0fEY2DV/8c+f/3112ag7b3nvU+N
        qU/B1DK2wvjeVM3Wcm9H2uX22Yxtet3TA/827jGg6+tx2qbq7M+eYwT4mxk3jqrRI1MpY/uqmb7x17Ir
        xLbU4/X82H42t/yIcblVM71dVQXRzFYgH+1zr23NDY9tq2bvYenLnp1V9TOLo5/NrWZqhzK22wvlvh6O
        OxKeS4C/mXHDqOr6xrk3lTK2rZrpy9070uwbffU/y7jcqpnebm8MfcxVe7dmHgm3fhR7L+zL6nvYj3r3
        PpvamY7tbzUzLr/GMB51z4zry5mfPccI8Ddz2yhu1W2F0L0NurfdciSkRn0aYC9YVo3LrJrp7fYuqlYw
        9T4rZw69z8zRoC1j+6qujqjH51c/mz6Wqi19+asXpvsZ273pH64zXxt5iXGjqNpyZCplbFe1pd+FsTod
        0o/09o44V43LrJrp7VZub+t97k1x3PQ+M7WDqCCr92HvyP5mb9k9KFc/m6358C293eotgn266KzPnmPm
        ayMvMW4UVTPjKWzVbCplbFO1pc/FProR13LOMC6zaqa3Wzn1731WPNJn1d6yz/psqrb05R8x9ls9M+Bc
        566NfNi4UVTNrE6l9DZb+s7giLHf0b4zq8tcbTd6Vp+Z2snU51RnPSvTHL3NEWO/Wd+tMTxaPJ93/c0c
        2ShWplLG56u2rLSZ+UjfmdVlrrYbPavPbTqlpijqKLdfL5hVt/f8PSt9e5uPFM/nXX8zRzeKvamU8bmq
        LSttZj7Sd2Z1mavtRlf3qeDud6McqW7v+XtW+vY2Hymez7v+Zo5uFHtTKf25LSttZj7Sd2Z1mavtRlf2
        uXcP9lh1RF5H5v0OkKpu7/l7VvqutOF9+cTezCMb1L2plPHxqi1nzYFvTeE8Ylxm1cxqu9GVfbbC+xbW
        tVPduuOlt+/O+mxmfXublQvBvI9jawSX6xvUqn4x6jaVMj5WteWsOx1qOWcYl1k1s9pudFWffjtefR5n
        3KJ41mdTtaUvf+tCOO9rbQ3macaNqWrV1ga7Nb2y5dH7wHtovfo+8BVX9ek70JWgXQnZs+7Rr9rS5+tX
        f5Cn1Pjr4my9liP311hbg3macWOqOqJv7Fun9Ft60K/e09vvrDjrp/HGZVbNrLYbXdVnpU23ErJ9nvzR
        z6ZqS//sj0yDjUfvs59D4FpraxpPM25MVUft3dc708N+71T6Ixv+nnG5VTOr7UZX9Vlp063uYI8e3W8d
        2VfN9HHUmdWevvPxo/Svsbam8TTjRlF11GzjvdVMnw6pjXo2h1uPP7LRrxqXWzWz2m50VZ9+xLv3fmwd
        IVdt2dpZHvlsbjWzdSZwL5DrubFt7WB4jbU1mKcZN4yqR/SplLHu6aFSQVBBdJvfrH/r6x4Qq6f1q8Zl
        V82sthtd1afvAKvG965UuG69f2PNgrlfbKxlVPDezD6bse7py6+q+fFxPLUj2Wq3d7bGddbWYJ6mbxyP
        mk2l7JkdGc7q7PAu/TVmVtuNruxz9L3bCtx70yNHlr/1w0R7jo6/ytTJa62twTxN30AedXQedLT6k4RH
        7lg4or/OzGq70dV9VkKwQvt21Nrv4a9Qv2frCLjXbRn98RX3zt7GGr8HXmftU+Vp+obyEVsb46o6da7+
        PZAqQOrxK28bG1+vama13egZfeqotIJ5PLquM6J6rB+x9h1tvd97qk/tZMezrPp/PTZ+LuNyj8xT1zLq
        M+47i9n3wOusb9FAlDF8K4z5fAQ4vLnb0XUd+a6e+fQ7V6o/n48AhzfXL3SuhHi/jmHa43MS4PDmjl7o
        rLAe29cOgM9JgMOb27qjqEK933J4u7jZ2473i/O5CHAIsBXMK2Xu+3MT4BCijqT7fPis3Kf9v0GAQ5gK
        8ppCGe8Dr6p7yN2n/b9FgAOEEuAAoQQ4QCgBDhBKgAOEEuAAoQQ4QCgBDhBKgAOEEuA81fiTg1Uzq+2u
        dOUYrlx2gvE3JtZPj/IYAc5TjaFVNbPa7kpXjuHKZb+78bcr+lW3HyPAeaoxtKpmVttd6coxXLnsdzf+
        Qi6/cOtjBDhPNYZW1cxquytdOYYrl/3Oxj9OYerk4wQ4b2kMt6pXuHIMVy77XY3z3qZOziHAeUtjuFW9
        wpVjuHLZ72qcOtn7s3CsEeC8pTHcql7hyjFcuex3NP5Fofo95pxDgD9R/TXxr1+/fvvy5cs/jkaq6pfx
        10re/87hO3jFuMfXqFp15ljHvlU3t789Of5Bhfr/GcveM35/Y/93X3/GsTr6Po8Af5Lx4s1e1cY5Uxvq
        2PboX1/pf7G8lnfPWeO+6X1mVtuNnjHWCs/+eK8z34dRBV/vt1VXXhzsr7WidixH+7DGu/kE/UhwpWbB
        ejSAu37kdm8HcOa4b3r7mdV2N88Yaw+ie1XjqSPPmd5+T//c9qq+t3uv/6j+OivG9vUech4BfrG+4dWG
        3UOz7oWtDW5sVzUL195udUPtp7JVM1eMu/S2M6vtyrPGOlYdDY/ve33ddyL3dhBju6p7+o7j9v2Nr19f
        b/2NzLONy6/aU3+/c2zvvu9z7X8CPKzmI8eVt+qvv/76/uy/9SCanQr3DXp1TrFvTLOjoavGXcZ2VTOr
        7Z451qoKz9ny6/Ee4rPPZmxTNVOBN7bbC+U+jbS6bqwal121p+80OZd39EI9aPdOH/vGWmGwpYfW6lX9
        foQ2u+B11bjL2K5qZrXdM8daVTvBe1Y/m7FN1cz4mdVYV862xp3Ive/vav2Mr3aenEuAX6gH5srp49i+
        aqYv+95RZ6nnx/azYClXjvvsds8c6733bNSPOrfGND5ftaV/ZnUBdUUddY/97k0TXaledxzH2WcD/P96
        9P1fLlBHILUS11Hh6sY/rvBVM30j3Tvy7HdP3NuYrhz32e2eOdbVAOpTVVvBOz5ftaV/xrMzpq6fBeyt
        G1fp69yrdiSf2Xzt5SXGFb5qpp+e7p0qj6fVVdX/TOOyq2bObveI1WX3do8G6NbUwfh81ZY+X3/E2O+K
        i5kr+vhX3z/WnbtlcFgFaZ1i19FKnw6ouqdfsJpNH9TjY7t7F+5WPTrus9utuHqsW8Z+WzvX8fmqLVtj
        fbReoY+f83lXn6RCpE4h67S4jkz6POms7qnljW1nwVyn0GO7I6eyZ4/77HajV411y17fvedLb/OReoV3
        GMNn5129WIVKD9AjtadPjWwZ2+xNtdxcNe6z25VXj3XLXt+950tv85F6hXcYw2fnXb3Q1n3BW1VHi3XU
        2O86qNqzd6GoH6VX+z1Xjvvsdu8w1i17ffeeLytt3ln6+BN4Vy+0FSy3IKk52QqTrrff0wOpX7Dq8+Rb
        r9ldOe6z273DWLeM/WouuBufr9rS29SZRpI+fs7nXb1IBci48tZGvBKeY5+qFX2u97ah17/j4z3ct1w9
        7jPbPXusr74LpXZISfpFzLQdUIL52suH9JV3ZePvG37Vitk0Sb8fuU+vbLl63Ge2e/ZYV96/0ncs9XU3
        Pl+1pc/rr0x/3dT3WTvsWgdeFZx9B7Ty+XDMfO3lQ8YVt2pFD9zVfmXsU8FW+pH5irH9ap8j4z6z3Uqb
        7iNj3TqS3tJ3LI9O49QR99impotWjeF5xm2jj9i7PsPHra31HDauuFUrtuZzV/Wjtb7x1/Mrxj5VK46M
        +8x2K226j4y1au8osu8gbjvTbmxTNdPHu3U03/UxvCo4Z2eGnGdtreewfvS7t+H19rda1acGHpleKFeP
        +8x2zx5rVQXqbJ69Hu+BO5u3HttUzWydMdwL5B6asx3IMzxyDYZj5msOH1JhMq68VfXYOB9ZG3w9tnVU
        eKuVi3I3PbRvdWQjvnrcvd3MSrtnj/VWtawxROv1tsZy76ynt72nzyVX1bLHcdeOYqvd2Rc++/L39J0m
        5/KOXmh2xDerraA5cuFn62itqpZ7xJXjHttUzay2e+ZYt0J6Vnvz5b39nqPfZ9UVUyf9Nfa8y3TOZyXA
        L7ay4VWg3I6U+n3bR8K3n7LeajwiXXXVuMc2VTOr7cozx7oS4itzvb3Pin5RcFbj93q2/lorxh3m6oVg
        1qx9AnxIHXVUaIwrck1r1GP9iKTPZVc4HdHDqb5+1BXjHttUzay2u3nmWGvqoqYwximrWkYF7OrOclxu
        1apafr1Ony6Zfa9nG1+zakW/wP7IAQXb1tccgAf0M0N3o5xHgAOXG6d/6iyJcwhw4CnG6a0j13aYE+DA
        U4x3pFSYmwv/OAEOPM148bUuuvIxAhx4mjrqHqdSZvfgs0aAA0813sZZtz/yOAEOPF3dr34L8dVftMa/
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFCCXCAUAIcIJQABwglwAFC
        CXCASN++/R+glf0QnTA0wQAAAABJRU5ErkJggg==
</value>
  </data>
</root>